# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ImportAdHocReferenceRequestSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'learning_standard': 'str',
        'title': 'str',
        'launch_url': 'str',
        'xapi_activity_id': 'str',
        'cmi5_publisher_id': 'str',
        'web_path_to_course': 'str'
    }

    attribute_map = {
        'learning_standard': 'learningStandard',
        'title': 'title',
        'launch_url': 'launchUrl',
        'xapi_activity_id': 'xapiActivityId',
        'cmi5_publisher_id': 'cmi5PublisherId',
        'web_path_to_course': 'webPathToCourse'
    }

    def __init__(self, learning_standard=None, title=None, launch_url=None, xapi_activity_id=None, cmi5_publisher_id=None, web_path_to_course=None):  # noqa: E501
        """ImportAdHocReferenceRequestSchema - a model defined in Swagger"""  # noqa: E501
        self._learning_standard = None
        self._title = None
        self._launch_url = None
        self._xapi_activity_id = None
        self._cmi5_publisher_id = None
        self._web_path_to_course = None
        self.discriminator = None
        self.learning_standard = learning_standard
        self.title = title
        self.launch_url = launch_url
        if xapi_activity_id is not None:
            self.xapi_activity_id = xapi_activity_id
        if cmi5_publisher_id is not None:
            self.cmi5_publisher_id = cmi5_publisher_id
        self.web_path_to_course = web_path_to_course

    @property
    def learning_standard(self):
        """Gets the learning_standard of this ImportAdHocReferenceRequestSchema.  # noqa: E501

        The learning standard for the course to import.  # noqa: E501

        :return: The learning_standard of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._learning_standard

    @learning_standard.setter
    def learning_standard(self, learning_standard):
        """Sets the learning_standard of this ImportAdHocReferenceRequestSchema.

        The learning standard for the course to import.  # noqa: E501

        :param learning_standard: The learning_standard of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :type: str
        """
        if learning_standard is None:
            raise ValueError("Invalid value for `learning_standard`, must not be `None`")  # noqa: E501

        self._learning_standard = learning_standard

    @property
    def title(self):
        """Gets the title of this ImportAdHocReferenceRequestSchema.  # noqa: E501

        The title of the course to import.  # noqa: E501

        :return: The title of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ImportAdHocReferenceRequestSchema.

        The title of the course to import.  # noqa: E501

        :param title: The title of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def launch_url(self):
        """Gets the launch_url of this ImportAdHocReferenceRequestSchema.  # noqa: E501

        URL to the specific content file to launch when this course is launched.  # noqa: E501

        :return: The launch_url of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._launch_url

    @launch_url.setter
    def launch_url(self, launch_url):
        """Sets the launch_url of this ImportAdHocReferenceRequestSchema.

        URL to the specific content file to launch when this course is launched.  # noqa: E501

        :param launch_url: The launch_url of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :type: str
        """
        if launch_url is None:
            raise ValueError("Invalid value for `launch_url`, must not be `None`")  # noqa: E501

        self._launch_url = launch_url

    @property
    def xapi_activity_id(self):
        """Gets the xapi_activity_id of this ImportAdHocReferenceRequestSchema.  # noqa: E501

        The xApi activity ID associated with this course. In general, this can be omitted if this course is not 'using xAPI and following the Tin Can launch guidelines'.  # noqa: E501

        :return: The xapi_activity_id of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._xapi_activity_id

    @xapi_activity_id.setter
    def xapi_activity_id(self, xapi_activity_id):
        """Sets the xapi_activity_id of this ImportAdHocReferenceRequestSchema.

        The xApi activity ID associated with this course. In general, this can be omitted if this course is not 'using xAPI and following the Tin Can launch guidelines'.  # noqa: E501

        :param xapi_activity_id: The xapi_activity_id of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :type: str
        """

        self._xapi_activity_id = xapi_activity_id

    @property
    def cmi5_publisher_id(self):
        """Gets the cmi5_publisher_id of this ImportAdHocReferenceRequestSchema.  # noqa: E501

        The publisher ID for a CMI5 course. This can be omitted if the learning standard is not CMI5.  # noqa: E501

        :return: The cmi5_publisher_id of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._cmi5_publisher_id

    @cmi5_publisher_id.setter
    def cmi5_publisher_id(self, cmi5_publisher_id):
        """Sets the cmi5_publisher_id of this ImportAdHocReferenceRequestSchema.

        The publisher ID for a CMI5 course. This can be omitted if the learning standard is not CMI5.  # noqa: E501

        :param cmi5_publisher_id: The cmi5_publisher_id of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :type: str
        """

        self._cmi5_publisher_id = cmi5_publisher_id

    @property
    def web_path_to_course(self):
        """Gets the web_path_to_course of this ImportAdHocReferenceRequestSchema.  # noqa: E501

        This is the URL to the root of the course, where the course content is already available.  # noqa: E501

        :return: The web_path_to_course of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._web_path_to_course

    @web_path_to_course.setter
    def web_path_to_course(self, web_path_to_course):
        """Sets the web_path_to_course of this ImportAdHocReferenceRequestSchema.

        This is the URL to the root of the course, where the course content is already available.  # noqa: E501

        :param web_path_to_course: The web_path_to_course of this ImportAdHocReferenceRequestSchema.  # noqa: E501
        :type: str
        """
        if web_path_to_course is None:
            raise ValueError("Invalid value for `web_path_to_course`, must not be `None`")  # noqa: E501

        self._web_path_to_course = web_path_to_course

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportAdHocReferenceRequestSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportAdHocReferenceRequestSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
