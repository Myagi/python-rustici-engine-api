# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LtiReporterSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sourced_id': 'str',
        'version': 'str',
        'outcome_url': 'str',
        'credentials': 'OAuthCredentialsSchema'
    }

    attribute_map = {
        'sourced_id': 'sourcedId',
        'version': 'version',
        'outcome_url': 'outcomeUrl',
        'credentials': 'credentials'
    }

    def __init__(self, sourced_id=None, version=None, outcome_url=None, credentials=None):  # noqa: E501
        """LtiReporterSchema - a model defined in Swagger"""  # noqa: E501
        self._sourced_id = None
        self._version = None
        self._outcome_url = None
        self._credentials = None
        self.discriminator = None
        self.sourced_id = sourced_id
        self.version = version
        self.outcome_url = outcome_url
        self.credentials = credentials

    @property
    def sourced_id(self):
        """Gets the sourced_id of this LtiReporterSchema.  # noqa: E501

        The LTI sourced ID associated with the launch  # noqa: E501

        :return: The sourced_id of this LtiReporterSchema.  # noqa: E501
        :rtype: str
        """
        return self._sourced_id

    @sourced_id.setter
    def sourced_id(self, sourced_id):
        """Sets the sourced_id of this LtiReporterSchema.

        The LTI sourced ID associated with the launch  # noqa: E501

        :param sourced_id: The sourced_id of this LtiReporterSchema.  # noqa: E501
        :type: str
        """
        if sourced_id is None:
            raise ValueError("Invalid value for `sourced_id`, must not be `None`")  # noqa: E501

        self._sourced_id = sourced_id

    @property
    def version(self):
        """Gets the version of this LtiReporterSchema.  # noqa: E501

        The version of LTI reporting to use (1.0 or 1.1).  # noqa: E501

        :return: The version of this LtiReporterSchema.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LtiReporterSchema.

        The version of LTI reporting to use (1.0 or 1.1).  # noqa: E501

        :param version: The version of this LtiReporterSchema.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def outcome_url(self):
        """Gets the outcome_url of this LtiReporterSchema.  # noqa: E501

        The URL to which LTI results will be posted.  # noqa: E501

        :return: The outcome_url of this LtiReporterSchema.  # noqa: E501
        :rtype: str
        """
        return self._outcome_url

    @outcome_url.setter
    def outcome_url(self, outcome_url):
        """Sets the outcome_url of this LtiReporterSchema.

        The URL to which LTI results will be posted.  # noqa: E501

        :param outcome_url: The outcome_url of this LtiReporterSchema.  # noqa: E501
        :type: str
        """
        if outcome_url is None:
            raise ValueError("Invalid value for `outcome_url`, must not be `None`")  # noqa: E501

        self._outcome_url = outcome_url

    @property
    def credentials(self):
        """Gets the credentials of this LtiReporterSchema.  # noqa: E501


        :return: The credentials of this LtiReporterSchema.  # noqa: E501
        :rtype: OAuthCredentialsSchema
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this LtiReporterSchema.


        :param credentials: The credentials of this LtiReporterSchema.  # noqa: E501
        :type: OAuthCredentialsSchema
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LtiReporterSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LtiReporterSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
