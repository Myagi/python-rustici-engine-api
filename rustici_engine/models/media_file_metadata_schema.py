# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MediaFileMetadataSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'content_language': 'str',
        'move_on': 'str',
        'estimated_duration': 'int',
        'activity_type': 'str',
        'cmi5_publisher_id': 'str'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'content_language': 'contentLanguage',
        'move_on': 'moveOn',
        'estimated_duration': 'estimatedDuration',
        'activity_type': 'activityType',
        'cmi5_publisher_id': 'cmi5PublisherId'
    }

    def __init__(self, title=None, description=None, content_language=None, move_on=None, estimated_duration=None, activity_type=None, cmi5_publisher_id=None):  # noqa: E501
        """MediaFileMetadataSchema - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._description = None
        self._content_language = None
        self._move_on = None
        self._estimated_duration = None
        self._activity_type = None
        self._cmi5_publisher_id = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if content_language is not None:
            self.content_language = content_language
        if move_on is not None:
            self.move_on = move_on
        if estimated_duration is not None:
            self.estimated_duration = estimated_duration
        if activity_type is not None:
            self.activity_type = activity_type
        if cmi5_publisher_id is not None:
            self.cmi5_publisher_id = cmi5_publisher_id

    @property
    def title(self):
        """Gets the title of this MediaFileMetadataSchema.  # noqa: E501

        Title for the referenced course content  # noqa: E501

        :return: The title of this MediaFileMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MediaFileMetadataSchema.

        Title for the referenced course content  # noqa: E501

        :param title: The title of this MediaFileMetadataSchema.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this MediaFileMetadataSchema.  # noqa: E501

        Description of the referenced course content  # noqa: E501

        :return: The description of this MediaFileMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MediaFileMetadataSchema.

        Description of the referenced course content  # noqa: E501

        :param description: The description of this MediaFileMetadataSchema.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def content_language(self):
        """Gets the content_language of this MediaFileMetadataSchema.  # noqa: E501

        Language code that specifies the content's language. The default value is 'en'.  # noqa: E501

        :return: The content_language of this MediaFileMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._content_language

    @content_language.setter
    def content_language(self, content_language):
        """Sets the content_language of this MediaFileMetadataSchema.

        Language code that specifies the content's language. The default value is 'en'.  # noqa: E501

        :param content_language: The content_language of this MediaFileMetadataSchema.  # noqa: E501
        :type: str
        """

        self._content_language = content_language

    @property
    def move_on(self):
        """Gets the move_on of this MediaFileMetadataSchema.  # noqa: E501

        Value of the cmi5 'moveOn' property for the referenced course content. The default value is 'Completed'.  # noqa: E501

        :return: The move_on of this MediaFileMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._move_on

    @move_on.setter
    def move_on(self, move_on):
        """Sets the move_on of this MediaFileMetadataSchema.

        Value of the cmi5 'moveOn' property for the referenced course content. The default value is 'Completed'.  # noqa: E501

        :param move_on: The move_on of this MediaFileMetadataSchema.  # noqa: E501
        :type: str
        """

        self._move_on = move_on

    @property
    def estimated_duration(self):
        """Gets the estimated_duration of this MediaFileMetadataSchema.  # noqa: E501

        Estimated number of seconds required to complete the course.  # noqa: E501

        :return: The estimated_duration of this MediaFileMetadataSchema.  # noqa: E501
        :rtype: int
        """
        return self._estimated_duration

    @estimated_duration.setter
    def estimated_duration(self, estimated_duration):
        """Sets the estimated_duration of this MediaFileMetadataSchema.

        Estimated number of seconds required to complete the course.  # noqa: E501

        :param estimated_duration: The estimated_duration of this MediaFileMetadataSchema.  # noqa: E501
        :type: int
        """

        self._estimated_duration = estimated_duration

    @property
    def activity_type(self):
        """Gets the activity_type of this MediaFileMetadataSchema.  # noqa: E501

        The IRI activity type of the media content. If not provided, reasonable default values will be assumed based on the content's 'contentType'.  # noqa: E501

        :return: The activity_type of this MediaFileMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this MediaFileMetadataSchema.

        The IRI activity type of the media content. If not provided, reasonable default values will be assumed based on the content's 'contentType'.  # noqa: E501

        :param activity_type: The activity_type of this MediaFileMetadataSchema.  # noqa: E501
        :type: str
        """

        self._activity_type = activity_type

    @property
    def cmi5_publisher_id(self):
        """Gets the cmi5_publisher_id of this MediaFileMetadataSchema.  # noqa: E501

        The publisher ID for a cmi5 course.  # noqa: E501

        :return: The cmi5_publisher_id of this MediaFileMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._cmi5_publisher_id

    @cmi5_publisher_id.setter
    def cmi5_publisher_id(self, cmi5_publisher_id):
        """Sets the cmi5_publisher_id of this MediaFileMetadataSchema.

        The publisher ID for a cmi5 course.  # noqa: E501

        :param cmi5_publisher_id: The cmi5_publisher_id of this MediaFileMetadataSchema.  # noqa: E501
        :type: str
        """

        self._cmi5_publisher_id = cmi5_publisher_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MediaFileMetadataSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaFileMetadataSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
