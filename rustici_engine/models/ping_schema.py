# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PingSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_message': 'str',
        'current_time': 'str',
        'database_message': 'str'
    }

    attribute_map = {
        'api_message': 'apiMessage',
        'current_time': 'currentTime',
        'database_message': 'databaseMessage'
    }

    def __init__(self, api_message=None, current_time=None, database_message=None):  # noqa: E501
        """PingSchema - a model defined in Swagger"""  # noqa: E501
        self._api_message = None
        self._current_time = None
        self._database_message = None
        self.discriminator = None
        if api_message is not None:
            self.api_message = api_message
        if current_time is not None:
            self.current_time = current_time
        if database_message is not None:
            self.database_message = database_message

    @property
    def api_message(self):
        """Gets the api_message of this PingSchema.  # noqa: E501


        :return: The api_message of this PingSchema.  # noqa: E501
        :rtype: str
        """
        return self._api_message

    @api_message.setter
    def api_message(self, api_message):
        """Sets the api_message of this PingSchema.


        :param api_message: The api_message of this PingSchema.  # noqa: E501
        :type: str
        """

        self._api_message = api_message

    @property
    def current_time(self):
        """Gets the current_time of this PingSchema.  # noqa: E501


        :return: The current_time of this PingSchema.  # noqa: E501
        :rtype: str
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this PingSchema.


        :param current_time: The current_time of this PingSchema.  # noqa: E501
        :type: str
        """

        self._current_time = current_time

    @property
    def database_message(self):
        """Gets the database_message of this PingSchema.  # noqa: E501


        :return: The database_message of this PingSchema.  # noqa: E501
        :rtype: str
        """
        return self._database_message

    @database_message.setter
    def database_message(self, database_message):
        """Sets the database_message of this PingSchema.


        :param database_message: The database_message of this PingSchema.  # noqa: E501
        :type: str
        """

        self._database_message = database_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PingSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PingSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
