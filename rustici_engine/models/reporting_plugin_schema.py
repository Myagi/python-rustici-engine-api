# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ReportingPluginSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plugin_type': 'str',
        'version': 'PluginVersionSchema',
        'organization_id': 'int',
        'pipe_id': 'str',
        'enabled': 'bool',
        'installed': 'bool'
    }

    attribute_map = {
        'plugin_type': 'pluginType',
        'version': 'version',
        'organization_id': 'organizationId',
        'pipe_id': 'pipeId',
        'enabled': 'enabled',
        'installed': 'installed'
    }

    def __init__(self, plugin_type=None, version=None, organization_id=None, pipe_id=None, enabled=None, installed=False):  # noqa: E501
        """ReportingPluginSchema - a model defined in Swagger"""  # noqa: E501
        self._plugin_type = None
        self._version = None
        self._organization_id = None
        self._pipe_id = None
        self._enabled = None
        self._installed = None
        self.discriminator = None
        self.plugin_type = plugin_type
        if version is not None:
            self.version = version
        if organization_id is not None:
            self.organization_id = organization_id
        if pipe_id is not None:
            self.pipe_id = pipe_id
        if enabled is not None:
            self.enabled = enabled
        if installed is not None:
            self.installed = installed

    @property
    def plugin_type(self):
        """Gets the plugin_type of this ReportingPluginSchema.  # noqa: E501

        type of reporting plugin  # noqa: E501

        :return: The plugin_type of this ReportingPluginSchema.  # noqa: E501
        :rtype: str
        """
        return self._plugin_type

    @plugin_type.setter
    def plugin_type(self, plugin_type):
        """Sets the plugin_type of this ReportingPluginSchema.

        type of reporting plugin  # noqa: E501

        :param plugin_type: The plugin_type of this ReportingPluginSchema.  # noqa: E501
        :type: str
        """
        if plugin_type is None:
            raise ValueError("Invalid value for `plugin_type`, must not be `None`")  # noqa: E501

        self._plugin_type = plugin_type

    @property
    def version(self):
        """Gets the version of this ReportingPluginSchema.  # noqa: E501


        :return: The version of this ReportingPluginSchema.  # noqa: E501
        :rtype: PluginVersionSchema
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReportingPluginSchema.


        :param version: The version of this ReportingPluginSchema.  # noqa: E501
        :type: PluginVersionSchema
        """

        self._version = version

    @property
    def organization_id(self):
        """Gets the organization_id of this ReportingPluginSchema.  # noqa: E501


        :return: The organization_id of this ReportingPluginSchema.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ReportingPluginSchema.


        :param organization_id: The organization_id of this ReportingPluginSchema.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def pipe_id(self):
        """Gets the pipe_id of this ReportingPluginSchema.  # noqa: E501


        :return: The pipe_id of this ReportingPluginSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipe_id

    @pipe_id.setter
    def pipe_id(self, pipe_id):
        """Sets the pipe_id of this ReportingPluginSchema.


        :param pipe_id: The pipe_id of this ReportingPluginSchema.  # noqa: E501
        :type: str
        """

        self._pipe_id = pipe_id

    @property
    def enabled(self):
        """Gets the enabled of this ReportingPluginSchema.  # noqa: E501

        Is there an enabled instance of this connector for the specified tenant  # noqa: E501

        :return: The enabled of this ReportingPluginSchema.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ReportingPluginSchema.

        Is there an enabled instance of this connector for the specified tenant  # noqa: E501

        :param enabled: The enabled of this ReportingPluginSchema.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def installed(self):
        """Gets the installed of this ReportingPluginSchema.  # noqa: E501

        Is the Reporting plugin configured and installed  # noqa: E501

        :return: The installed of this ReportingPluginSchema.  # noqa: E501
        :rtype: bool
        """
        return self._installed

    @installed.setter
    def installed(self, installed):
        """Sets the installed of this ReportingPluginSchema.

        Is the Reporting plugin configured and installed  # noqa: E501

        :param installed: The installed of this ReportingPluginSchema.  # noqa: E501
        :type: bool
        """

        self._installed = installed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingPluginSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingPluginSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
