# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AppManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_credential(self, body, **kwargs):  # noqa: E501
        """Create credential  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credential(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CredentialRequestSchema body: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: CredentialCreatedSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_credential_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_credential_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_credential_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create credential  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credential_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CredentialRequestSchema body: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: CredentialCreatedSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_credential`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/credentials', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredentialCreatedSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_or_update_tenant(self, body, tenant_name, **kwargs):  # noqa: E501
        """Create or update tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_tenant(body, tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str tenant_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_tenant_with_http_info(body, tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_tenant_with_http_info(body, tenant_name, **kwargs)  # noqa: E501
            return data

    def create_or_update_tenant_with_http_info(self, body, tenant_name, **kwargs):  # noqa: E501
        """Create or update tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_tenant_with_http_info(body, tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str tenant_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_or_update_tenant`")  # noqa: E501
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `create_or_update_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenantName'] = params['tenant_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/tenants/{tenantName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_token(self, body, **kwargs):  # noqa: E501
        """Create token  # noqa: E501

        Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRequestSchema body: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create token  # noqa: E501

        Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRequestSchema body: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResultSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application_configuration_setting(self, setting_id, **kwargs):  # noqa: E501
        """Clears the `settingId` value for this level  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_configuration_setting(setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_id: (required)
        :param str engine_tenant_name: optional tenant for this request
        :param str learning_standard: Required if singleSco is specified. Scopes the request to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_configuration_setting_with_http_info(setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_configuration_setting_with_http_info(setting_id, **kwargs)  # noqa: E501
            return data

    def delete_application_configuration_setting_with_http_info(self, setting_id, **kwargs):  # noqa: E501
        """Clears the `settingId` value for this level  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_configuration_setting_with_http_info(setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_id: (required)
        :param str engine_tenant_name: optional tenant for this request
        :param str learning_standard: Required if singleSco is specified. Scopes the request to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting_id', 'engine_tenant_name', 'learning_standard', 'single_sco']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_configuration_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params or
                params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `delete_application_configuration_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']  # noqa: E501

        query_params = []
        if 'learning_standard' in params:
            query_params.append(('learningStandard', params['learning_standard']))  # noqa: E501
        if 'single_sco' in params:
            query_params.append(('singleSco', params['single_sco']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/configuration/{settingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_credential(self, credential_id, **kwargs):  # noqa: E501
        """Removes `credentialId` credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_credential(credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str credential_id: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_credential_with_http_info(credential_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_credential_with_http_info(credential_id, **kwargs)  # noqa: E501
            return data

    def delete_credential_with_http_info(self, credential_id, **kwargs):  # noqa: E501
        """Removes `credentialId` credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_credential_with_http_info(credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str credential_id: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credential_id', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credential_id' is set
        if ('credential_id' not in params or
                params['credential_id'] is None):
            raise ValueError("Missing the required parameter `credential_id` when calling `delete_credential`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'credential_id' in params:
            path_params['credentialId'] = params['credential_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/credentials/{credentialId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tenant(self, tenant_name, **kwargs):  # noqa: E501
        """Delete a tenant. Warning: If tenant data is not deleted first, this will leave orphaned rows that can only be deleted manually. Does not remove any data, but does remove mapping between name and key used to store data. Consider deactivating instead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tenant(tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tenant_with_http_info(tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tenant_with_http_info(tenant_name, **kwargs)  # noqa: E501
            return data

    def delete_tenant_with_http_info(self, tenant_name, **kwargs):  # noqa: E501
        """Delete a tenant. Warning: If tenant data is not deleted first, this will leave orphaned rows that can only be deleted manually. Does not remove any data, but does remove mapping between name and key used to store data. Consider deactivating instead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tenant_with_http_info(tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `delete_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenantName'] = params['tenant_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/tenants/{tenantName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tenant_data(self, tenant_name, **kwargs):  # noqa: E501
        """Delete all of a tenant's data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tenant_data(tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tenant_data_with_http_info(tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tenant_data_with_http_info(tenant_name, **kwargs)  # noqa: E501
            return data

    def delete_tenant_data_with_http_info(self, tenant_name, **kwargs):  # noqa: E501
        """Delete all of a tenant's data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tenant_data_with_http_info(tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tenant_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `delete_tenant_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenantName'] = params['tenant_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/tenants/{tenantName}/data', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_configuration(self, **kwargs):  # noqa: E501
        """Returns all configuration settings for this level  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_configuration(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: optional tenant for this request
        :param str learning_standard: Required if singleSco is specified. Scopes the request to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. 
        :param bool include_metadata:
        :param bool include_hidden_settings: Should settings that are declared to be hidden be included. Note: such settings generally do not need to be modified, and may be confusing. 
        :param bool include_secret_settings: Should settings that are stored encrypted (type 'secretString') be included. Note: if included, the decrypted value will be returned. 
        :param bool process_replacement_tokens: Whether to process replacement tokens (false returns the raw value of each setting, without tokens or environment variable replacements)
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_configuration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_application_configuration_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_application_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all configuration settings for this level  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_configuration_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: optional tenant for this request
        :param str learning_standard: Required if singleSco is specified. Scopes the request to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. 
        :param bool include_metadata:
        :param bool include_hidden_settings: Should settings that are declared to be hidden be included. Note: such settings generally do not need to be modified, and may be confusing. 
        :param bool include_secret_settings: Should settings that are stored encrypted (type 'secretString') be included. Note: if included, the decrypted value will be returned. 
        :param bool process_replacement_tokens: Whether to process replacement tokens (false returns the raw value of each setting, without tokens or environment variable replacements)
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'learning_standard', 'single_sco', 'include_metadata', 'include_hidden_settings', 'include_secret_settings', 'process_replacement_tokens']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'learning_standard' in params:
            query_params.append(('learningStandard', params['learning_standard']))  # noqa: E501
        if 'single_sco' in params:
            query_params.append(('singleSco', params['single_sco']))  # noqa: E501
        if 'include_metadata' in params:
            query_params.append(('includeMetadata', params['include_metadata']))  # noqa: E501
        if 'include_hidden_settings' in params:
            query_params.append(('includeHiddenSettings', params['include_hidden_settings']))  # noqa: E501
        if 'include_secret_settings' in params:
            query_params.append(('includeSecretSettings', params['include_secret_settings']))  # noqa: E501
        if 'process_replacement_tokens' in params:
            query_params.append(('processReplacementTokens', params['process_replacement_tokens']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_authenticated_credential(self, **kwargs):  # noqa: E501
        """Get information about the credential used to authenticate this request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authenticated_credential(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: CredentialSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_authenticated_credential_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_authenticated_credential_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_authenticated_credential_with_http_info(self, **kwargs):  # noqa: E501
        """Get information about the credential used to authenticate this request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authenticated_credential_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: CredentialSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authenticated_credential" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/authenticatedCredential', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredentialSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credential(self, credential_id, **kwargs):  # noqa: E501
        """Get information on `credentialId` credential  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credential(credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str credential_id: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: CredentialSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credential_with_http_info(credential_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_credential_with_http_info(credential_id, **kwargs)  # noqa: E501
            return data

    def get_credential_with_http_info(self, credential_id, **kwargs):  # noqa: E501
        """Get information on `credentialId` credential  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credential_with_http_info(credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str credential_id: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: CredentialSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credential_id', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credential_id' is set
        if ('credential_id' not in params or
                params['credential_id'] is None):
            raise ValueError("Missing the required parameter `credential_id` when calling `get_credential`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'credential_id' in params:
            path_params['credentialId'] = params['credential_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/credentials/{credentialId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredentialSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credentials(self, **kwargs):  # noqa: E501
        """List of credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credentials(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: CredentialListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credentials_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_credentials_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_credentials_with_http_info(self, **kwargs):  # noqa: E501
        """List of credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credentials_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: CredentialListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credentials" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/credentials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CredentialListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pii_deletion_job(self, engine_tenant_name, job_id, **kwargs):  # noqa: E501
        """Check the status of a PII deletion job with the provided job id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pii_deletion_job(engine_tenant_name, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str job_id: (required)
        :return: PIIDeletionResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pii_deletion_job_with_http_info(engine_tenant_name, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pii_deletion_job_with_http_info(engine_tenant_name, job_id, **kwargs)  # noqa: E501
            return data

    def get_pii_deletion_job_with_http_info(self, engine_tenant_name, job_id, **kwargs):  # noqa: E501
        """Check the status of a PII deletion job with the provided job id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pii_deletion_job_with_http_info(engine_tenant_name, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str job_id: (required)
        :return: PIIDeletionResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pii_deletion_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_pii_deletion_job`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_pii_deletion_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/PII/deletionJob/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PIIDeletionResultSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tenant_list(self, **kwargs):  # noqa: E501
        """Get list of all tenants  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_deactivated:
        :return: TenantListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tenant_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tenant_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tenant_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of all tenants  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_deactivated:
        :return: TenantListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_deactivated']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tenant_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_deactivated' in params:
            query_params.append(('includeDeactivated', params['include_deactivated']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/tenants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inspect_token(self, token, **kwargs):  # noqa: E501
        """Inspect token  # noqa: E501

        Verifies the signature of the provided token, and if valid returns information about the token   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inspect_token(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: TokenInfoSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.inspect_token_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.inspect_token_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def inspect_token_with_http_info(self, token, **kwargs):  # noqa: E501
        """Inspect token  # noqa: E501

        Verifies the signature of the provided token, and if valid returns information about the token   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inspect_token_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: TokenInfoSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inspect_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `inspect_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenInfoSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_pii_deletion_job(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Initiate a job to delete a user's Personal Identifying Information from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pii_deletion_job(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PIIDeletionRequestSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :return: PIIDeletionRequestResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_pii_deletion_job_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_pii_deletion_job_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
            return data

    def post_pii_deletion_job_with_http_info(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Initiate a job to delete a user's Personal Identifying Information from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_pii_deletion_job_with_http_info(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PIIDeletionRequestSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :return: PIIDeletionRequestResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_pii_deletion_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_pii_deletion_job`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `post_pii_deletion_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/PII/deletionJob', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PIIDeletionRequestResultSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_update_encrypted_setting(self, engine_tenant_name, **kwargs):  # noqa: E501
        """Re-write settings, and statement pipe passwords using the current encryption settings. For password rotation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_update_encrypted_setting(engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_update_encrypted_setting_with_http_info(engine_tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_update_encrypted_setting_with_http_info(engine_tenant_name, **kwargs)  # noqa: E501
            return data

    def post_update_encrypted_setting_with_http_info(self, engine_tenant_name, **kwargs):  # noqa: E501
        """Re-write settings, and statement pipe passwords using the current encryption settings. For password rotation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_update_encrypted_setting_with_http_info(engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_update_encrypted_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `post_update_encrypted_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/configuration/updateEncryptedSettings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_credential_secret(self, credential_id, **kwargs):  # noqa: E501
        """Reset credential secret  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_credential_secret(credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str credential_id: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_credential_secret_with_http_info(credential_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_credential_secret_with_http_info(credential_id, **kwargs)  # noqa: E501
            return data

    def reset_credential_secret_with_http_info(self, credential_id, **kwargs):  # noqa: E501
        """Reset credential secret  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_credential_secret_with_http_info(credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str credential_id: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: StringResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credential_id', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_credential_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credential_id' is set
        if ('credential_id' not in params or
                params['credential_id'] is None):
            raise ValueError("Missing the required parameter `credential_id` when calling `reset_credential_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'credential_id' in params:
            path_params['credentialId'] = params['credential_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/credentials/{credentialId}/resetSecret', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResultSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_application_configuration(self, body, **kwargs):  # noqa: E501
        """Set configuration settings for this level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_application_configuration(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsPostSchema body: (required)
        :param str engine_tenant_name: optional tenant for this request
        :param str learning_standard: Required if singleSco is specified. Scopes the request to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_application_configuration_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_application_configuration_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def set_application_configuration_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set configuration settings for this level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_application_configuration_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsPostSchema body: (required)
        :param str engine_tenant_name: optional tenant for this request
        :param str learning_standard: Required if singleSco is specified. Scopes the request to the provided learning standard.
        :param bool single_sco: Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'learning_standard', 'single_sco']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_application_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_application_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'learning_standard' in params:
            query_params.append(('learningStandard', params['learning_standard']))  # noqa: E501
        if 'single_sco' in params:
            query_params.append(('singleSco', params['single_sco']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/configuration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_credential(self, body, credential_id, **kwargs):  # noqa: E501
        """Update `credentialId` credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credential(body, credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CredentialRequestSchema body: (required)
        :param str credential_id: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_credential_with_http_info(body, credential_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_credential_with_http_info(body, credential_id, **kwargs)  # noqa: E501
            return data

    def update_credential_with_http_info(self, body, credential_id, **kwargs):  # noqa: E501
        """Update `credentialId` credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_credential_with_http_info(body, credential_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CredentialRequestSchema body: (required)
        :param str credential_id: (required)
        :param str engine_tenant_name: If specified, the tenant that will be used to store or validate the credentials or token. If not specified, the system data store / settings will be used. Note that PermissionsSchema contains 'tenantName' which should be used for any permissions that need to be scoped to a particular tenant. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'credential_id', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_credential`")  # noqa: E501
        # verify the required parameter 'credential_id' is set
        if ('credential_id' not in params or
                params['credential_id'] is None):
            raise ValueError("Missing the required parameter `credential_id` when calling `update_credential`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'credential_id' in params:
            path_params['credentialId'] = params['credential_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/appManagement/credentials/{credentialId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
