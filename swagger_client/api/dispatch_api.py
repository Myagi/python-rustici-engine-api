# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DispatchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_destinations(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Create multiple destinations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_destinations(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DestinationListSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_destinations_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_destinations_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
            return data

    def create_destinations_with_http_info(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Create multiple destinations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_destinations_with_http_info(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DestinationListSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_destinations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_destinations`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `create_destinations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dispatches(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Create multiple dispatches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dispatches(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDispatchListSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dispatches_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dispatches_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
            return data

    def create_dispatches_with_http_info(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Create multiple dispatches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dispatches_with_http_info(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDispatchListSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dispatches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_dispatches`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `create_dispatches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_destination(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Delete the destination with id `destinationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_destination(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_destination_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_destination_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def delete_destination_with_http_info(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Delete the destination with id `destinationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_destination_with_http_info(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `delete_destination`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `delete_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_destination_dispatches(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Delete all dispatches associated with this destination  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_destination_dispatches(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_destination_dispatches_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_destination_dispatches_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def delete_destination_dispatches_with_http_info(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Delete all dispatches associated with this destination  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_destination_dispatches_with_http_info(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_destination_dispatches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `delete_destination_dispatches`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `delete_destination_dispatches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}/dispatches', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dispatch(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Delete the dispatch with id `dispatchId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dispatch(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dispatch_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dispatch_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
            return data

    def delete_dispatch_with_http_info(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Delete the dispatch with id `dispatchId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dispatch_with_http_info(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'dispatch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dispatch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `delete_dispatch`")  # noqa: E501
        # verify the required parameter 'dispatch_id' is set
        if ('dispatch_id' not in params or
                params['dispatch_id'] is None):
            raise ValueError("Missing the required parameter `dispatch_id` when calling `delete_dispatch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dispatch_id' in params:
            path_params['dispatchId'] = params['dispatch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches/{dispatchId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_registration_instancing(self, body, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Enable or disable registration instancing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_registration_instancing(body, engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnabledSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_registration_instancing_with_http_info(body, engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_registration_instancing_with_http_info(body, engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def enable_registration_instancing_with_http_info(self, body, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Enable or disable registration instancing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_registration_instancing_with_http_info(body, engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnabledSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_registration_instancing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enable_registration_instancing`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `enable_registration_instancing`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `enable_registration_instancing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}/dispatches/registrationInstancing', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destination(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Get the destination with id `destinationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destination(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: DestinationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destination_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_destination_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def get_destination_with_http_info(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Get the destination with id `destinationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destination_with_http_info(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: DestinationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_destination`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `get_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DestinationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destination_dispatch_registration_count(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Get the registration count for all related dispatch registrations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destination_dispatch_registration_count(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: IntegerResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destination_dispatch_registration_count_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_destination_dispatch_registration_count_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def get_destination_dispatch_registration_count_with_http_info(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Get the registration count for all related dispatch registrations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destination_dispatch_registration_count_with_http_info(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: IntegerResultSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destination_dispatch_registration_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_destination_dispatch_registration_count`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `get_destination_dispatch_registration_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}/registrationCount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegerResultSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destination_dispatch_zip(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Get a ZIP file containing all dispatch packages related to a destination.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destination_dispatch_zip(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :param str type: The type of dispatch package to export (SCORM12, SCORM2004-3RD or AICC)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destination_dispatch_zip_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_destination_dispatch_zip_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def get_destination_dispatch_zip_with_http_info(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Get a ZIP file containing all dispatch packages related to a destination.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destination_dispatch_zip_with_http_info(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :param str type: The type of dispatch package to export (SCORM12, SCORM2004-3RD or AICC)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'destination_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destination_dispatch_zip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_destination_dispatch_zip`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `get_destination_dispatch_zip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}/dispatches/zip', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destination_dispatches(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Get a list of related dispatches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destination_dispatches(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :return: DispatchListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destination_dispatches_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_destination_dispatches_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def get_destination_dispatches_with_http_info(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Get a list of related dispatches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destination_dispatches_with_http_info(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :return: DispatchListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'destination_id', 'more', 'since', 'until']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destination_dispatches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_destination_dispatches`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `get_destination_dispatches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}/dispatches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DispatchListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_destinations(self, engine_tenant_name, **kwargs):  # noqa: E501
        """Get a list of destinations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destinations(engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str course_id: Limit the results to destinations that have dispatches of the specified course
        :return: DestinationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_destinations_with_http_info(engine_tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_destinations_with_http_info(engine_tenant_name, **kwargs)  # noqa: E501
            return data

    def get_destinations_with_http_info(self, engine_tenant_name, **kwargs):  # noqa: E501
        """Get a list of destinations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_destinations_with_http_info(engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str course_id: Limit the results to destinations that have dispatches of the specified course
        :return: DestinationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'more', 'since', 'until', 'course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_destinations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_destinations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'course_id' in params:
            query_params.append(('courseId', params['course_id']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DestinationListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dispatch(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Get the dispatch with id `dispatchId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatch(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: DispatchSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dispatch_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dispatch_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
            return data

    def get_dispatch_with_http_info(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Get the dispatch with id `dispatchId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatch_with_http_info(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: DispatchSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'dispatch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dispatch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_dispatch`")  # noqa: E501
        # verify the required parameter 'dispatch_id' is set
        if ('dispatch_id' not in params or
                params['dispatch_id'] is None):
            raise ValueError("Missing the required parameter `dispatch_id` when calling `get_dispatch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dispatch_id' in params:
            path_params['dispatchId'] = params['dispatch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches/{dispatchId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DispatchSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dispatch_enabled(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Returns boolean indicating if dispatch with id `dispatchId` is enabled  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatch_enabled(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: EnabledSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dispatch_enabled_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dispatch_enabled_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
            return data

    def get_dispatch_enabled_with_http_info(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Returns boolean indicating if dispatch with id `dispatchId` is enabled  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatch_enabled_with_http_info(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: EnabledSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'dispatch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dispatch_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_dispatch_enabled`")  # noqa: E501
        # verify the required parameter 'dispatch_id' is set
        if ('dispatch_id' not in params or
                params['dispatch_id'] is None):
            raise ValueError("Missing the required parameter `dispatch_id` when calling `get_dispatch_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dispatch_id' in params:
            path_params['dispatchId'] = params['dispatch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches/{dispatchId}/enabled', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnabledSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dispatch_registration_count(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Get the registration count for this dispatch, and the date and time of the last count reset, if any.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatch_registration_count(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: DispatchRegistrationCountSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dispatch_registration_count_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dispatch_registration_count_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
            return data

    def get_dispatch_registration_count_with_http_info(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Get the registration count for this dispatch, and the date and time of the last count reset, if any.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatch_registration_count_with_http_info(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: DispatchRegistrationCountSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'dispatch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dispatch_registration_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_dispatch_registration_count`")  # noqa: E501
        # verify the required parameter 'dispatch_id' is set
        if ('dispatch_id' not in params or
                params['dispatch_id'] is None):
            raise ValueError("Missing the required parameter `dispatch_id` when calling `get_dispatch_registration_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dispatch_id' in params:
            path_params['dispatchId'] = params['dispatch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches/{dispatchId}/registrationCount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DispatchRegistrationCountSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dispatch_zip(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Get the ZIP dispatch package.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatch_zip(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :param str type: The type of dispatch package to export (SCORM12, SCORM2004-3RD or AICC)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dispatch_zip_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dispatch_zip_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
            return data

    def get_dispatch_zip_with_http_info(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Get the ZIP dispatch package.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatch_zip_with_http_info(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :param str type: The type of dispatch package to export (SCORM12, SCORM2004-3RD or AICC)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'dispatch_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dispatch_zip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_dispatch_zip`")  # noqa: E501
        # verify the required parameter 'dispatch_id' is set
        if ('dispatch_id' not in params or
                params['dispatch_id'] is None):
            raise ValueError("Missing the required parameter `dispatch_id` when calling `get_dispatch_zip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dispatch_id' in params:
            path_params['dispatchId'] = params['dispatch_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches/{dispatchId}/zip', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dispatches(self, engine_tenant_name, **kwargs):  # noqa: E501
        """Get a list of dispatches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatches(engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str course_id: Limit the results to dispatches of the specified course
        :return: DispatchListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dispatches_with_http_info(engine_tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dispatches_with_http_info(engine_tenant_name, **kwargs)  # noqa: E501
            return data

    def get_dispatches_with_http_info(self, engine_tenant_name, **kwargs):  # noqa: E501
        """Get a list of dispatches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dispatches_with_http_info(engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str course_id: Limit the results to dispatches of the specified course
        :return: DispatchListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'more', 'since', 'until', 'course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dispatches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_dispatches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'course_id' in params:
            query_params.append(('courseId', params['course_id']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DispatchListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lti_dispatch(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Get the information necessary to launch this dispatch using the IMS LTI specification.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lti_dispatch(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: DispatchLtiInfoSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lti_dispatch_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lti_dispatch_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
            return data

    def get_lti_dispatch_with_http_info(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Get the information necessary to launch this dispatch using the IMS LTI specification.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lti_dispatch_with_http_info(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: DispatchLtiInfoSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'dispatch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lti_dispatch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_lti_dispatch`")  # noqa: E501
        # verify the required parameter 'dispatch_id' is set
        if ('dispatch_id' not in params or
                params['dispatch_id'] is None):
            raise ValueError("Missing the required parameter `dispatch_id` when calling `get_lti_dispatch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dispatch_id' in params:
            path_params['dispatchId'] = params['dispatch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches/{dispatchId}/lti', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DispatchLtiInfoSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dispatch_lti_reporters(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Set up a temporary LTI reporter; for use by products that use their own LTI entry points  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dispatch_lti_reporters(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LtiReporterSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :return: LtiReporterIdSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dispatch_lti_reporters_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dispatch_lti_reporters_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
            return data

    def post_dispatch_lti_reporters_with_http_info(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Set up a temporary LTI reporter; for use by products that use their own LTI entry points  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dispatch_lti_reporters_with_http_info(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LtiReporterSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :return: LtiReporterIdSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dispatch_lti_reporters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dispatch_lti_reporters`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `post_dispatch_lti_reporters`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/ltiReporters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LtiReporterIdSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_destination_dispatch_registration_count(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Reset the registration count for related dispatches.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_destination_dispatch_registration_count(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_destination_dispatch_registration_count_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_destination_dispatch_registration_count_with_http_info(engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def reset_destination_dispatch_registration_count_with_http_info(self, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Reset the registration count for related dispatches.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_destination_dispatch_registration_count_with_http_info(engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_destination_dispatch_registration_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `reset_destination_dispatch_registration_count`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `reset_destination_dispatch_registration_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}/registrationCount', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_dispatch_registration_count(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Reset the registration count for this dispatch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_dispatch_registration_count(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_dispatch_registration_count_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_dispatch_registration_count_with_http_info(engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
            return data

    def reset_dispatch_registration_count_with_http_info(self, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Reset the registration count for this dispatch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_dispatch_registration_count_with_http_info(engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'dispatch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_dispatch_registration_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `reset_dispatch_registration_count`")  # noqa: E501
        # verify the required parameter 'dispatch_id' is set
        if ('dispatch_id' not in params or
                params['dispatch_id'] is None):
            raise ValueError("Missing the required parameter `dispatch_id` when calling `reset_dispatch_registration_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dispatch_id' in params:
            path_params['dispatchId'] = params['dispatch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches/{dispatchId}/registrationCount', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_destination(self, body, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Create or update the destination with id `destinationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_destination(body, engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DestinationSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_destination_with_http_info(body, engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_destination_with_http_info(body, engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def set_destination_with_http_info(self, body, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Create or update the destination with id `destinationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_destination_with_http_info(body, engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DestinationSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_destination" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_destination`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `set_destination`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `set_destination`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_destination_dispatch_enabled(self, body, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Enable or disable all related dispatches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_destination_dispatch_enabled(body, engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnabledSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_destination_dispatch_enabled_with_http_info(body, engine_tenant_name, destination_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_destination_dispatch_enabled_with_http_info(body, engine_tenant_name, destination_id, **kwargs)  # noqa: E501
            return data

    def set_destination_dispatch_enabled_with_http_info(self, body, engine_tenant_name, destination_id, **kwargs):  # noqa: E501
        """Enable or disable all related dispatches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_destination_dispatch_enabled_with_http_info(body, engine_tenant_name, destination_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnabledSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str destination_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'destination_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_destination_dispatch_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_destination_dispatch_enabled`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `set_destination_dispatch_enabled`")  # noqa: E501
        # verify the required parameter 'destination_id' is set
        if ('destination_id' not in params or
                params['destination_id'] is None):
            raise ValueError("Missing the required parameter `destination_id` when calling `set_destination_dispatch_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destination_id' in params:
            path_params['destinationId'] = params['destination_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/destinations/{destinationId}/dispatches/enabled', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_dispatch_enabled(self, body, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Enable or disable the dispatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_dispatch_enabled(body, engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnabledSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_dispatch_enabled_with_http_info(body, engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_dispatch_enabled_with_http_info(body, engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
            return data

    def set_dispatch_enabled_with_http_info(self, body, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Enable or disable the dispatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_dispatch_enabled_with_http_info(body, engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnabledSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'dispatch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_dispatch_enabled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_dispatch_enabled`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `set_dispatch_enabled`")  # noqa: E501
        # verify the required parameter 'dispatch_id' is set
        if ('dispatch_id' not in params or
                params['dispatch_id'] is None):
            raise ValueError("Missing the required parameter `dispatch_id` when calling `set_dispatch_enabled`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dispatch_id' in params:
            path_params['dispatchId'] = params['dispatch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches/{dispatchId}/enabled', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dispatch(self, body, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Update the dispatch with id `dispatchId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dispatch(body, engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateDispatchSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dispatch_with_http_info(body, engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dispatch_with_http_info(body, engine_tenant_name, dispatch_id, **kwargs)  # noqa: E501
            return data

    def update_dispatch_with_http_info(self, body, engine_tenant_name, dispatch_id, **kwargs):  # noqa: E501
        """Update the dispatch with id `dispatchId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dispatch_with_http_info(body, engine_tenant_name, dispatch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateDispatchSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str dispatch_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'dispatch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dispatch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dispatch`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `update_dispatch`")  # noqa: E501
        # verify the required parameter 'dispatch_id' is set
        if ('dispatch_id' not in params or
                params['dispatch_id'] is None):
            raise ValueError("Missing the required parameter `dispatch_id` when calling `update_dispatch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dispatch_id' in params:
            path_params['dispatchId'] = params['dispatch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/dispatch/dispatches/{dispatchId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
