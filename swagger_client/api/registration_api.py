# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RegistrationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def build_registration_launch_link(self, body, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Returns the link to use to launch this registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.build_registration_launch_link(body, engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LaunchLinkRequestSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: LaunchLinkSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.build_registration_launch_link_with_http_info(body, engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.build_registration_launch_link_with_http_info(body, engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def build_registration_launch_link_with_http_info(self, body, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Returns the link to use to launch this registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.build_registration_launch_link_with_http_info(body, engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LaunchLinkRequestSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: LaunchLinkSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method build_registration_launch_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `build_registration_launch_link`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `build_registration_launch_link`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `build_registration_launch_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/launchLink', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaunchLinkSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_new_registration_instance(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Create a new instance for this registration specified by the registration ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_registration_instance(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_registration_instance_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_registration_instance_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def create_new_registration_instance_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Create a new instance for this registration specified by the registration ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_registration_instance_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_registration_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `create_new_registration_instance`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `create_new_registration_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_registration(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Create a registration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_registration(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRegistrationSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param int course_version: The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_registration_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_registration_with_http_info(body, engine_tenant_name, **kwargs)  # noqa: E501
            return data

    def create_registration_with_http_info(self, body, engine_tenant_name, **kwargs):  # noqa: E501
        """Create a registration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_registration_with_http_info(body, engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRegistrationSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param int course_version: The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'course_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_registration`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `create_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'course_version' in params:
            query_params.append(('courseVersion', params['course_version']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Delete `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Delete `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `delete_registration`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_configuration_setting(self, engine_tenant_name, registration_id, setting_id, **kwargs):  # noqa: E501
        """Clears the `settingId` value for this registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_configuration_setting(engine_tenant_name, registration_id, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param str setting_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_configuration_setting_with_http_info(engine_tenant_name, registration_id, setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_configuration_setting_with_http_info(engine_tenant_name, registration_id, setting_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_configuration_setting_with_http_info(self, engine_tenant_name, registration_id, setting_id, **kwargs):  # noqa: E501
        """Clears the `settingId` value for this registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_configuration_setting_with_http_info(engine_tenant_name, registration_id, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param str setting_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'setting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_configuration_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `delete_registration_configuration_setting`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_configuration_setting`")  # noqa: E501
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params or
                params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `delete_registration_configuration_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/configuration/{settingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_global_data(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """delete global data associated with `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_global_data(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_global_data_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_global_data_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_global_data_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """delete global data associated with `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_global_data_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_global_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `delete_registration_global_data`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_global_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/globalData', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_instance(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Delete instance `instanceId` of `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_instance(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_instance_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_instance_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_instance_with_http_info(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Delete instance `instanceId` of `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_instance_with_http_info(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `delete_registration_instance`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_instance`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `delete_registration_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_instance_configuration_setting(self, engine_tenant_name, registration_id, instance_id, setting_id, **kwargs):  # noqa: E501
        """Clears the `settingId` value for this registration instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_instance_configuration_setting(engine_tenant_name, registration_id, instance_id, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param str setting_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_instance_configuration_setting_with_http_info(engine_tenant_name, registration_id, instance_id, setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_instance_configuration_setting_with_http_info(engine_tenant_name, registration_id, instance_id, setting_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_instance_configuration_setting_with_http_info(self, engine_tenant_name, registration_id, instance_id, setting_id, **kwargs):  # noqa: E501
        """Clears the `settingId` value for this registration instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_instance_configuration_setting_with_http_info(engine_tenant_name, registration_id, instance_id, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param str setting_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'instance_id', 'setting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_instance_configuration_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `delete_registration_instance_configuration_setting`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_instance_configuration_setting`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `delete_registration_instance_configuration_setting`")  # noqa: E501
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params or
                params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `delete_registration_instance_configuration_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registration_progress(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """delete registration progress (clear registration)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_progress(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registration_progress_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registration_progress_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def delete_registration_progress_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """delete registration progress (clear registration)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_progress_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `delete_registration_progress`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `delete_registration_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/progress', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Does this registration exist?  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Does this registration exist?  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_configuration(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Returns all configuration settings for this registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_configuration(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param bool include_metadata:
        :param bool include_hidden_settings: Should settings that are declared to be hidden be included. Note: such settings generally do not need to be modified, and may be confusing. 
        :param bool include_secret_settings: Should settings that are stored encrypted (type 'secretString') be included. Note: if included, the decrypted value will be returned. 
        :param bool process_replacement_tokens: Whether to process replacement tokens (false returns the raw value of each setting, without tokens or environment variable replacements)
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_configuration_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_configuration_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_configuration_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Returns all configuration settings for this registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_configuration_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param bool include_metadata:
        :param bool include_hidden_settings: Should settings that are declared to be hidden be included. Note: such settings generally do not need to be modified, and may be confusing. 
        :param bool include_secret_settings: Should settings that are stored encrypted (type 'secretString') be included. Note: if included, the decrypted value will be returned. 
        :param bool process_replacement_tokens: Whether to process replacement tokens (false returns the raw value of each setting, without tokens or environment variable replacements)
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'include_metadata', 'include_hidden_settings', 'include_secret_settings', 'process_replacement_tokens']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration_configuration`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'include_metadata' in params:
            query_params.append(('includeMetadata', params['include_metadata']))  # noqa: E501
        if 'include_hidden_settings' in params:
            query_params.append(('includeHiddenSettings', params['include_hidden_settings']))  # noqa: E501
        if 'include_secret_settings' in params:
            query_params.append(('includeSecretSettings', params['include_secret_settings']))  # noqa: E501
        if 'process_replacement_tokens' in params:
            query_params.append(('processReplacementTokens', params['process_replacement_tokens']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instance_configuration(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Returns all configuration settings for this registration instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_configuration(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param bool include_metadata:
        :param bool include_hidden_settings: Should settings that are declared to be hidden be included. Note: such settings generally do not need to be modified, and may be confusing. 
        :param bool include_secret_settings: Should settings that are stored encrypted (type 'secretString') be included. Note: if included, the decrypted value will be returned. 
        :param bool process_replacement_tokens: Whether to process replacement tokens (false returns the raw value of each setting, without tokens or environment variable replacements)
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instance_configuration_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instance_configuration_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instance_configuration_with_http_info(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Returns all configuration settings for this registration instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_configuration_with_http_info(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param bool include_metadata:
        :param bool include_hidden_settings: Should settings that are declared to be hidden be included. Note: such settings generally do not need to be modified, and may be confusing. 
        :param bool include_secret_settings: Should settings that are stored encrypted (type 'secretString') be included. Note: if included, the decrypted value will be returned. 
        :param bool process_replacement_tokens: Whether to process replacement tokens (false returns the raw value of each setting, without tokens or environment variable replacements)
        :return: SettingListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'instance_id', 'include_metadata', 'include_hidden_settings', 'include_secret_settings', 'process_replacement_tokens']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration_instance_configuration`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_configuration`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'include_metadata' in params:
            query_params.append(('includeMetadata', params['include_metadata']))  # noqa: E501
        if 'include_hidden_settings' in params:
            query_params.append(('includeHiddenSettings', params['include_hidden_settings']))  # noqa: E501
        if 'include_secret_settings' in params:
            query_params.append(('includeSecretSettings', params['include_secret_settings']))  # noqa: E501
        if 'process_replacement_tokens' in params:
            query_params.append(('processReplacementTokens', params['process_replacement_tokens']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instance_launch_history(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Returns history of this registration's launches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_launch_history(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instance_launch_history_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instance_launch_history_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instance_launch_history_with_http_info(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Returns history of this registration's launches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_launch_history_with_http_info(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'instance_id', 'include_history_log']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_launch_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration_instance_launch_history`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_launch_history`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_launch_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'include_history_log' in params:
            query_params.append(('includeHistoryLog', params['include_history_log']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/launchHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaunchHistoryListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instance_progress(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get registration progress for instance `instanceId` of `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_progress(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :param bool create_xapi_registration_id_if_absent: create the xAPI registration ID for this registration if one does not already exist
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instance_progress_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instance_progress_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instance_progress_with_http_info(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get registration progress for instance `instanceId` of `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_progress_with_http_info(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :param bool create_xapi_registration_id_if_absent: create the xAPI registration ID for this registration if one does not already exist
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'instance_id', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime', 'create_xapi_registration_id_if_absent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration_instance_progress`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_progress`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'include_child_results' in params:
            query_params.append(('includeChildResults', params['include_child_results']))  # noqa: E501
        if 'include_interactions_and_objectives' in params:
            query_params.append(('includeInteractionsAndObjectives', params['include_interactions_and_objectives']))  # noqa: E501
        if 'include_runtime' in params:
            query_params.append(('includeRuntime', params['include_runtime']))  # noqa: E501
        if 'create_xapi_registration_id_if_absent' in params:
            query_params.append(('createXapiRegistrationIdIfAbsent', params['create_xapi_registration_id_if_absent']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instance_statements(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get xAPI statements for instance `instanceId` of `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_statements(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instance_statements_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instance_statements_with_http_info(engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instance_statements_with_http_info(self, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Get xAPI statements for instance `instanceId` of `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instance_statements_with_http_info(engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'instance_id', 'since', 'until', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instance_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration_instance_statements`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instance_statements`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_registration_instance_statements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/xAPIStatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XapiStatementResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_instances(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Get all the instances of this the registration specified by the registration ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instances(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_instances_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_instances_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_instances_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Get all the instances of this the registration specified by the registration ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_instances_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'since', 'until', 'more', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration_instances`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501
        if 'include_child_results' in params:
            query_params.append(('includeChildResults', params['include_child_results']))  # noqa: E501
        if 'include_interactions_and_objectives' in params:
            query_params.append(('includeInteractionsAndObjectives', params['include_interactions_and_objectives']))  # noqa: E501
        if 'include_runtime' in params:
            query_params.append(('includeRuntime', params['include_runtime']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_launch_history(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Returns history of this registration's launches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_launch_history(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_launch_history_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_launch_history_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_launch_history_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Returns history of this registration's launches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_launch_history_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param bool include_history_log: Whether to include the history log in the launch history
        :return: LaunchHistoryListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'include_history_log']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_launch_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration_launch_history`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_launch_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'include_history_log' in params:
            query_params.append(('includeHistoryLog', params['include_history_log']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/launchHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LaunchHistoryListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_progress(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Get registration progress for `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_progress(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :param bool create_xapi_registration_id_if_absent: create the xAPI registration ID for this registration if one does not already exist
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_progress_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_progress_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_progress_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Get registration progress for `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_progress_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :param bool create_xapi_registration_id_if_absent: create the xAPI registration ID for this registration if one does not already exist
        :return: RegistrationSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime', 'create_xapi_registration_id_if_absent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration_progress`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'include_child_results' in params:
            query_params.append(('includeChildResults', params['include_child_results']))  # noqa: E501
        if 'include_interactions_and_objectives' in params:
            query_params.append(('includeInteractionsAndObjectives', params['include_interactions_and_objectives']))  # noqa: E501
        if 'include_runtime' in params:
            query_params.append(('includeRuntime', params['include_runtime']))  # noqa: E501
        if 'create_xapi_registration_id_if_absent' in params:
            query_params.append(('createXapiRegistrationIdIfAbsent', params['create_xapi_registration_id_if_absent']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_statements(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Get xAPI statements for `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_statements(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_statements_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_statements_with_http_info(engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def get_registration_statements_with_http_info(self, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Get xAPI statements for `registrationId`  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_statements_with_http_info(engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :return: XapiStatementResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'registration_id', 'since', 'until', 'more']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registration_statements`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `get_registration_statements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/xAPIStatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XapiStatementResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registrations(self, engine_tenant_name, **kwargs):  # noqa: E501
        """Gets a list of registrations including a summary of the status of each registration.  # noqa: E501

        The 'since' parameter exists to allow retrieving only registrations that have changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registrations(engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str course_id: Only registrations for the specified course id will be included.
        :param str learner_id: Only entries for the specified learner id will be included.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registrations_with_http_info(engine_tenant_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_registrations_with_http_info(engine_tenant_name, **kwargs)  # noqa: E501
            return data

    def get_registrations_with_http_info(self, engine_tenant_name, **kwargs):  # noqa: E501
        """Gets a list of registrations including a summary of the status of each registration.  # noqa: E501

        The 'since' parameter exists to allow retrieving only registrations that have changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registrations_with_http_info(engine_tenant_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str engine_tenant_name: tenant for this request (required)
        :param str course_id: Only registrations for the specified course id will be included.
        :param str learner_id: Only entries for the specified learner id will be included.
        :param datetime since: Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param datetime until: Only items updated up until the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
        :param str more: Value for this parameter will be provided in the 'more' property of lists, where needed. An opaque value, construction and parsing may change without notice.
        :param bool include_child_results: Include information about each learning object, not just the top level in the results
        :param bool include_interactions_and_objectives: Include interactions and objectives in the results
        :param bool include_runtime: Include runtime details in the results
        :return: RegistrationListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_tenant_name', 'course_id', 'learner_id', 'since', 'until', 'more', 'include_child_results', 'include_interactions_and_objectives', 'include_runtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registrations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `get_registrations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'course_id' in params:
            query_params.append(('courseId', params['course_id']))  # noqa: E501
        if 'learner_id' in params:
            query_params.append(('learnerId', params['learner_id']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'more' in params:
            query_params.append(('more', params['more']))  # noqa: E501
        if 'include_child_results' in params:
            query_params.append(('includeChildResults', params['include_child_results']))  # noqa: E501
        if 'include_interactions_and_objectives' in params:
            query_params.append(('includeInteractionsAndObjectives', params['include_interactions_and_objectives']))  # noqa: E501
        if 'include_runtime' in params:
            query_params.append(('includeRuntime', params['include_runtime']))  # noqa: E501

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistrationListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_registration_configuration(self, body, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Set configuration settings for this registration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_registration_configuration(body, engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsPostSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_registration_configuration_with_http_info(body, engine_tenant_name, registration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_registration_configuration_with_http_info(body, engine_tenant_name, registration_id, **kwargs)  # noqa: E501
            return data

    def set_registration_configuration_with_http_info(self, body, engine_tenant_name, registration_id, **kwargs):  # noqa: E501
        """Set configuration settings for this registration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_registration_configuration_with_http_info(body, engine_tenant_name, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsPostSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'registration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_registration_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_registration_configuration`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `set_registration_configuration`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `set_registration_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/configuration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_registration_instance_configuration(self, body, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Set configuration settings for this registration instance.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_registration_instance_configuration(body, engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsPostSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_registration_instance_configuration_with_http_info(body, engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_registration_instance_configuration_with_http_info(body, engine_tenant_name, registration_id, instance_id, **kwargs)  # noqa: E501
            return data

    def set_registration_instance_configuration_with_http_info(self, body, engine_tenant_name, registration_id, instance_id, **kwargs):  # noqa: E501
        """Set configuration settings for this registration instance.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_registration_instance_configuration_with_http_info(body, engine_tenant_name, registration_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsPostSchema body: (required)
        :param str engine_tenant_name: tenant for this request (required)
        :param str registration_id: id for this registration (required)
        :param int instance_id: the instance of this registration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'engine_tenant_name', 'registration_id', 'instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_registration_instance_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_registration_instance_configuration`")  # noqa: E501
        # verify the required parameter 'engine_tenant_name' is set
        if ('engine_tenant_name' not in params or
                params['engine_tenant_name'] is None):
            raise ValueError("Missing the required parameter `engine_tenant_name` when calling `set_registration_instance_configuration`")  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if ('registration_id' not in params or
                params['registration_id'] is None):
            raise ValueError("Missing the required parameter `registration_id` when calling `set_registration_instance_configuration`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `set_registration_instance_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registration_id' in params:
            path_params['registrationId'] = params['registration_id']  # noqa: E501
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'engine_tenant_name' in params:
            header_params['engineTenantName'] = params['engine_tenant_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/registrations/{registrationId}/instances/{instanceId}/configuration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
