# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AboutSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'platform': 'str',
        'distribution': 'str',
        'integration': 'str',
        'content_connector_types': 'list[ConnectorTypeSchema]',
        'reporting_plugin': 'ReportingPluginSchema',
        'valid_scopes': 'list[str]'
    }

    attribute_map = {
        'version': 'version',
        'platform': 'platform',
        'distribution': 'distribution',
        'integration': 'integration',
        'content_connector_types': 'contentConnectorTypes',
        'reporting_plugin': 'reportingPlugin',
        'valid_scopes': 'validScopes'
    }

    def __init__(self, version=None, platform=None, distribution=None, integration=None, content_connector_types=None, reporting_plugin=None, valid_scopes=None):  # noqa: E501
        """AboutSchema - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._platform = None
        self._distribution = None
        self._integration = None
        self._content_connector_types = None
        self._reporting_plugin = None
        self._valid_scopes = None
        self.discriminator = None
        self.version = version
        self.platform = platform
        if distribution is not None:
            self.distribution = distribution
        if integration is not None:
            self.integration = integration
        if content_connector_types is not None:
            self.content_connector_types = content_connector_types
        if reporting_plugin is not None:
            self.reporting_plugin = reporting_plugin
        if valid_scopes is not None:
            self.valid_scopes = valid_scopes

    @property
    def version(self):
        """Gets the version of this AboutSchema.  # noqa: E501


        :return: The version of this AboutSchema.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AboutSchema.


        :param version: The version of this AboutSchema.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def platform(self):
        """Gets the platform of this AboutSchema.  # noqa: E501


        :return: The platform of this AboutSchema.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AboutSchema.


        :param platform: The platform of this AboutSchema.  # noqa: E501
        :type: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def distribution(self):
        """Gets the distribution of this AboutSchema.  # noqa: E501


        :return: The distribution of this AboutSchema.  # noqa: E501
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this AboutSchema.


        :param distribution: The distribution of this AboutSchema.  # noqa: E501
        :type: str
        """

        self._distribution = distribution

    @property
    def integration(self):
        """Gets the integration of this AboutSchema.  # noqa: E501

        Integration class. Only relevant to some customers with Engine installations from before the 2015 release.  # noqa: E501

        :return: The integration of this AboutSchema.  # noqa: E501
        :rtype: str
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """Sets the integration of this AboutSchema.

        Integration class. Only relevant to some customers with Engine installations from before the 2015 release.  # noqa: E501

        :param integration: The integration of this AboutSchema.  # noqa: E501
        :type: str
        """

        self._integration = integration

    @property
    def content_connector_types(self):
        """Gets the content_connector_types of this AboutSchema.  # noqa: E501


        :return: The content_connector_types of this AboutSchema.  # noqa: E501
        :rtype: list[ConnectorTypeSchema]
        """
        return self._content_connector_types

    @content_connector_types.setter
    def content_connector_types(self, content_connector_types):
        """Sets the content_connector_types of this AboutSchema.


        :param content_connector_types: The content_connector_types of this AboutSchema.  # noqa: E501
        :type: list[ConnectorTypeSchema]
        """

        self._content_connector_types = content_connector_types

    @property
    def reporting_plugin(self):
        """Gets the reporting_plugin of this AboutSchema.  # noqa: E501


        :return: The reporting_plugin of this AboutSchema.  # noqa: E501
        :rtype: ReportingPluginSchema
        """
        return self._reporting_plugin

    @reporting_plugin.setter
    def reporting_plugin(self, reporting_plugin):
        """Sets the reporting_plugin of this AboutSchema.


        :param reporting_plugin: The reporting_plugin of this AboutSchema.  # noqa: E501
        :type: ReportingPluginSchema
        """

        self._reporting_plugin = reporting_plugin

    @property
    def valid_scopes(self):
        """Gets the valid_scopes of this AboutSchema.  # noqa: E501


        :return: The valid_scopes of this AboutSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._valid_scopes

    @valid_scopes.setter
    def valid_scopes(self, valid_scopes):
        """Sets the valid_scopes of this AboutSchema.


        :param valid_scopes: The valid_scopes of this AboutSchema.  # noqa: E501
        :type: list[str]
        """

        self._valid_scopes = valid_scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AboutSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AboutSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
