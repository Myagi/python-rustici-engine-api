# coding: utf-8

"""
    Rustici Engine API

    Rustici Engine API  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PermissionsSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scopes': 'list[str]',
        'tenant_name': 'str',
        'course_id': 'str',
        'registration_id': 'str'
    }

    attribute_map = {
        'scopes': 'scopes',
        'tenant_name': 'tenantName',
        'course_id': 'courseId',
        'registration_id': 'registrationId'
    }

    def __init__(self, scopes=None, tenant_name=None, course_id=None, registration_id=None):  # noqa: E501
        """PermissionsSchema - a model defined in Swagger"""  # noqa: E501
        self._scopes = None
        self._tenant_name = None
        self._course_id = None
        self._registration_id = None
        self.discriminator = None
        if scopes is not None:
            self.scopes = scopes
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if course_id is not None:
            self.course_id = course_id
        if registration_id is not None:
            self.registration_id = registration_id

    @property
    def scopes(self):
        """Gets the scopes of this PermissionsSchema.  # noqa: E501


        :return: The scopes of this PermissionsSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this PermissionsSchema.


        :param scopes: The scopes of this PermissionsSchema.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def tenant_name(self):
        """Gets the tenant_name of this PermissionsSchema.  # noqa: E501

        tenant these permissions apply to  # noqa: E501

        :return: The tenant_name of this PermissionsSchema.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this PermissionsSchema.

        tenant these permissions apply to  # noqa: E501

        :param tenant_name: The tenant_name of this PermissionsSchema.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def course_id(self):
        """Gets the course_id of this PermissionsSchema.  # noqa: E501

        course these permissions apply to  # noqa: E501

        :return: The course_id of this PermissionsSchema.  # noqa: E501
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this PermissionsSchema.

        course these permissions apply to  # noqa: E501

        :param course_id: The course_id of this PermissionsSchema.  # noqa: E501
        :type: str
        """

        self._course_id = course_id

    @property
    def registration_id(self):
        """Gets the registration_id of this PermissionsSchema.  # noqa: E501

        registration these permissions apply to  # noqa: E501

        :return: The registration_id of this PermissionsSchema.  # noqa: E501
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this PermissionsSchema.

        registration these permissions apply to  # noqa: E501

        :param registration_id: The registration_id of this PermissionsSchema.  # noqa: E501
        :type: str
        """

        self._registration_id = registration_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionsSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionsSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
